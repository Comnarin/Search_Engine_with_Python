# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Nattavee Narischat\Desktop\openfile_database.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox
import sqlite3

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(920, 737)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(50, 10, 821, 651))
        self.widget.setObjectName("widget")
        self.gridLayout = QtWidgets.QGridLayout(self.widget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.label = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setFamily("Opun")
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setFamily("Opun")
        font.setPointSize(20)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 2, 1, 1)
        self.tableWidget = QtWidgets.QTableWidget(self.widget)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.tableWidget.horizontalHeader().setVisible(True)
        self.gridLayout.addWidget(self.tableWidget, 1, 0, 1, 1)
        self.tableWidget_2 = QtWidgets.QTableWidget(self.widget)
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(0)
        self.tableWidget_2.setRowCount(0)
        self.gridLayout.addWidget(self.tableWidget_2, 1, 2, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 1, 1, 1, 1)
        self.gridLayout.setColumnStretch(0, 10)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 920, 21))
        self.menubar.setObjectName("menubar")
        self.menuOpen_file = QtWidgets.QMenu(self.menubar)
        self.menuOpen_file.setObjectName("menuOpen_file")
        self.menuSearch = QtWidgets.QMenu(self.menubar)
        self.menuSearch.setObjectName("menuSearch")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        
        
         # create and add action for menuOpen_file
        self.actionOpen_file = QtWidgets.QAction(MainWindow)
        self.actionOpen_file.setObjectName("actionOpen_file")
        self.actionOpen_file.setText("Open file")
        self.menuOpen_file.addAction(self.actionOpen_file)

        # connect action to function
        self.actionOpen_file.triggered.connect(self.openFileNameDialog)
        
        self.menubar.addAction(self.menuOpen_file.menuAction())
        self.menubar.addAction(self.menuSearch.menuAction())

        self.retranslateUi(MainWindow)  
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "DATA"))
        self.label_2.setText(_translate("MainWindow", "Fequency words"))
        self.menuOpen_file.setTitle(_translate("MainWindow", "file"))
        self.menuSearch.setTitle(_translate("MainWindow", "Search"))

    def openFileNameDialog(self):
        options = QFileDialog.Options()
        #options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(MainWindow,"Openfile", "","sqlite file (*.sqlite3);;database file (*.db)", options=options)
        if fileName:
            self.file_name = fileName
            print(self.file_name)
         # Call method to populate table with data from database
        try:
            self.populate_table()
        except:
            # create a QMessageBox object
            alert = QMessageBox()
            
            # set the message box text and type of alert
            alert.setText("It's is not my database")
            alert.setIcon(QMessageBox.Warning)
            
            # display the alert box
            alert.exec_()

    def populate_table(self):
        print("DATABASE is conneted")
        db_dir = (self.file_name)
        # Connect to database and execute SELECT statement
        conn = sqlite3.connect(db_dir)
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT * FROM words')
        except:
            print("It's is not my database")
        words = cursor.fetchall()
        cursor2 = conn.cursor()
        try:
            cursor2.execute('SELECT * FROM documents')
        except:
            print("It's is not my database")
        documents = cursor2.fetchall()

        # Set column and row count for table
        self.tableWidget.setColumnCount(len(documents[0]))
        self.tableWidget.setRowCount(len(documents))

        self.tableWidget_2.setColumnCount(len(words[0]))
        self.tableWidget_2.setRowCount(len(words))
        
        # Insert data into table
        for row in range(len(words)):
            for col in range(len(words[0])):
                self.tableWidget_2.setItem(row, col, QtWidgets.QTableWidgetItem(str(words[row][col])))
        
        for row2 in range(len(documents)):
            for col2 in range(len(documents[0])):
                self.tableWidget.setItem(row2, col2, QtWidgets.QTableWidgetItem(str(documents[row2][col2])))

        # Close database connection
        conn.close()



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
